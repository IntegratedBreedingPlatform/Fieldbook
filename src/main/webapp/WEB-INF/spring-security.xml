<?xml version="1.0" encoding="UTF-8"?>
<bean:beans xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http pattern="/static/**" security="none"/>
	<http pattern="/pages/**" security="none"/>
	<http pattern="/dynamic/**" security="none" />

	<http auto-config="true" use-expressions="true">		

		<!--MANAGE_STUDIES-->
		<intercept-url pattern="/TrialManager/**" access="hasAnyAuthority('ROLE_ADMIN',
		 	'ROLE_STUDIES',
		 	'ROLE_MANAGE_STUDIES',
		 	'ROLE_MS_MANAGE_OBSERVATION_UNITS',
		 	'ROLE_MS_WITHDRAW_INVENTORY',
		 	'ROLE_MS_CREATE_PENDING_WITHDRAWALS',
		 	'ROLE_MS_CREATE_CONFIRMED_WITHDRAWALS',
		 	'ROLE_MS_CANCEL_PENDING_TRANSACTIONS',
		 	'ROLE_MS_MANAGE_FILES',
		 	'ROLE_MS_CREATE_LOTS',
		 	'ROLE_CREATE_STUDIES',
		 	'ROLE_CLOSE_STUDY',
		 	'ROLE_DELETE_STUDY',
		 	'ROLE_LOCK_STUDY',
		 	'ROLE_GERMPLASM_AND_CHECKS',
		 	'ROLE_VIEW_GERMPLASM_AND_CHECKS',
		 	'ROLE_ADD_ENTRY_DETAILS_VARIABLES',
		 	'ROLE_ADD_ENTRY_DETAILS_VALUES',
		 	'ROLE_MODIFY_COLUMNS',
		 	'ROLE_REPLACE_GERMPLASM',
		 	'ROLE_ADD_NEW_ENTRIES'
		)"/>
		<!--IMPORT_DATASETS-->
		<intercept-url pattern="/etl" access="hasAnyAuthority('ROLE_ADMIN', 'ROLE_STUDIES', 'ROLE_IMPORT_DATASETS')"/>

		<intercept-url pattern="/**" access="isAuthenticated()" />
		<custom-filter position="PRE_AUTH_FILTER" ref="bmsPreAuthenticationFilter" />
		<access-denied-handler error-page="/accessDenied"/>
	</http>
	
	<!-- Must use AspectJ mode for using method level security annotations on Vaadin component beans. -->
	<global-method-security pre-post-annotations="enabled" mode="aspectj" proxy-target-class="true"/>

	<bean:bean id="preAuthenticatedAuthenticationProvider" 
			class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<bean:property name="preAuthenticatedUserDetailsService" ref="preAuthenticatedUserDetailsService" />
	</bean:bean>
	
	<bean:bean id="preAuthenticatedUserDetailsService" 
			class="org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService" />
	
	<bean:bean id="bmsPreAuthenticatedUsersRolePopulator" 
			class="org.generationcp.commons.security.BMSPreAuthenticatedUsersRolePopulator" />
  
  	<!-- This filter checks to see if the user is already authenticated by an external system (in BMS case it is the Workbench). 
		If already authenticated, lets the user in directly.  -->
	<bean:bean id="bmsPreAuthenticationFilter" class="org.generationcp.commons.security.BMSPreAuthenticationFilter">
		<bean:property name="authenticationManager" ref="bmsAuthenticationManager" />
		<bean:property name="authenticationDetailsSource" ref="bmsPreAuthenticatedUsersRolePopulator"/>
		<bean:property name="checkForPrincipalChanges" value="true"/>
		<bean:property name="invalidateSessionOnPrincipalChange" value="false"/>
	</bean:bean>
	
	<bean:bean id="workbenchUserDetailsService" class="org.generationcp.commons.security.WorkbenchUserDetailsService">
		<bean:property name="userService" ref="userService" />
	</bean:bean>

	<authentication-manager alias="bmsAuthenticationManager">
		<authentication-provider ref="preAuthenticatedAuthenticationProvider" />
		<authentication-provider user-service-ref="workbenchUserDetailsService">
			<password-encoder hash="bcrypt" />
		</authentication-provider>
	</authentication-manager>

</bean:beans>
