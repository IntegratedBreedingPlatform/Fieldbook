<?xml version="1.0" encoding="ISO-8859-1"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Declare property file locations  -->
	<context:property-placeholder location="classpath:git.properties, classpath:fieldbook.properties, classpath:workbench.properties" />

	<!-- **************************************************************** -->
	<!--  RESOURCE FOLDERS CONFIGURATION                                  -->
	<!--  Dispatcher configuration for serving static resources           -->
	<!-- **************************************************************** -->
	<mvc:resources mapping="/static/**" location="/WEB-INF/static/" />


	<mvc:interceptors>
      <bean class="com.efficio.fieldbook.web.interceptor.FieldbookHandlerInterceptor" />
    </mvc:interceptors> 

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0" />
    </bean>

	<!-- **************************************************************** -->
	<!--  SPRING ANNOTATION PROCESSING                                    -->
	<!-- **************************************************************** -->
	<mvc:annotation-driven />
	<context:component-scan base-package="com.efficio.fieldbook" />

	<!-- **************************************************************** -->
	<!-- MESSAGE EXTERNALIZATION/INTERNATIONALIZATION -->
	<!-- Standard Spring MessageSource implementation -->
	<!-- **************************************************************** -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="Messages" />
	</bean>

	<!-- **************************************************************** -->
	<!-- THYMELEAF-SPECIFIC ARTIFACTS -->
	<!-- TemplateResolver <- TemplateEngine <- ViewResolver -->
	<!-- **************************************************************** -->

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="false" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="additionalDialects">
        <set>
            <bean class="com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect"/>
        </set>
    </property>
	</bean>

	<bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
	</bean>


	<!-- Application Beans -->

	<bean id="fieldbookService" class="com.efficio.fieldbook.service.FieldbookServiceImpl" />

	<bean id="workbenchService" class="com.efficio.fieldbook.service.WorkbenchServiceImpl" />

	<bean id="fileService" class="com.efficio.fieldbook.service.FileServiceImpl"
		init-method="init">
		<constructor-arg value="${upload.directory}" />
	</bean>
	
	<bean id="measurementsGeneratorService" class="com.efficio.fieldbook.web.nursery.service.impl.MeasurementsGeneratorServiceImpl">
	</bean>
	
	<bean id="importGermplasmfileService" class="com.efficio.fieldbook.web.nursery.service.impl.ImportGermplasmFileServiceImpl">
	</bean>

	<bean id="importWorkbookFileService" class="com.efficio.fieldbook.web.nursery.service.impl.ImportWorkbookFileServiceImpl">
	</bean>

	<bean id="fieldmapService" class="com.efficio.fieldbook.service.FieldMapServiceImpl">
	</bean>
	
	<bean id="verticalFieldMapLayoutIterator" class="com.efficio.fieldbook.web.label.printing.service.impl.VerticalFieldMapLayoutIterator">
	</bean>
	
	<bean id="horizontalFieldMapLayoutIterator" class="com.efficio.fieldbook.web.label.printing.service.impl.HorizontalFieldMapLayoutIterator">
	</bean>
	
	<bean id="labelPrintingService" class="com.efficio.fieldbook.service.LabelPrintingServiceImpl">
	</bean>

	<bean id="exportExcelService" class="com.efficio.fieldbook.service.ExportExcelServiceImpl">
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10000000" />
	</bean>

	<bean id="demoUserSelection" class="com.efficio.fieldbook.web.demo.bean.UserSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="advancingNursery" class="com.efficio.fieldbook.web.nursery.bean.AdvancingNursery"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="nurseryUserSelection" class="com.efficio.fieldbook.web.nursery.bean.UserSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="trialSelection" class="com.efficio.fieldbook.web.trial.bean.TrialSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="userFieldmap" class="com.efficio.fieldbook.web.fieldmap.bean.UserFieldmap"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="userLabelPrinting" class="com.efficio.fieldbook.web.label.printing.bean.UserLabelPrinting"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="testJavaBean" class="com.efficio.fieldbook.web.demo.bean.TestJavaBean"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	<!-- **************************************************************** -->
	<!-- RESTful Web Service -->
	<!-- **************************************************************** -->

	<bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
   		<property name="supportedMediaTypes" value="application/json" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
   		<property name="messageConverters">
       		<list>
           		<ref bean="jsonConverter" />
           		<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
       		</list>
   		</property>    
	</bean>

	<!-- **************************************************************** -->
	<!-- MIDDLEWARE Database Managers -->
	<!-- **************************************************************** -->
	
	  <bean id="workbenchDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${workbench.driver}"/>
        <property name="url" value="${workbench.url}"/>
        <property name="username" value="${workbench.username}"/>
        <property name="password" value="${workbench.password}"/>
    </bean>
    
    <bean id="workbenchSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="workbenchDataSource"/>
        <property name="configLocation" value="classpath:ibpworkbench_hib.cfg.xml"/>
    </bean>
    
    
    <bean id="workbenchHibernateSessionProvider" class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider" scope="request">
        <property name="sessionFactory" ref="workbenchSessionFactory"/>
        
        <!-- JDK Standard Proxy around this request scoped bean, so we can use it on longer scoped beans -->
        <aop:scoped-proxy proxy-target-class="false"/>
    </bean>
    
    <bean id="managerFactoryProvider" 
    	class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
    	<constructor-arg ref="workbenchDataManager" />
    	<property name="maxCachedLocalSessionFactories" value="1" />
    	<property name="localPort" value="${workbench.port}" />
    	<property name="localHost" value="${workbench.host}" />
    	<property name="localUsername" value="${workbench.username}"/>
        <property name="localPassword" value="${workbench.password}"/>
    	<property name="centralPort" value="${workbench.port}" />
    	<property name="centralHost" value="${workbench.host}" />
    	<property name="centralUsername" value="${workbench.username}"/>
        <property name="centralPassword" value="${workbench.password}"/>
    </bean>
    
    <bean id="managerFactory" name="managerFactory"
    	factory-bean="managerFactoryProvider"
    	factory-method="createInstance"
    	scope="session" destroy-method="close">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="workbenchDataManager"
        class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl">
        <constructor-arg ref="workbenchHibernateSessionProvider" />
    </bean>
    
     <bean id="ontologyDataManagerV2" factory-bean="managerFactory"
    	factory-method="getNewOntologyDataManager"
    	scope="session">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="germplasmDataManagerV2" factory-bean="managerFactory"
    	factory-method="getGermplasmDataManager"
    	scope="session">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="dataImportService" factory-bean="managerFactory"
    	factory-method="getDataImportService"
    	scope="session" >
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="fieldbookMiddlewareService" factory-bean="managerFactory"
    	factory-method="getFieldbookMiddlewareService"
    	scope="session">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="ontologyService" factory-bean="managerFactory"
    	factory-method="getOntologyService"
    	scope="session" >
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="studyDataManagerV2" factory-bean="managerFactory"
    	factory-method="getNewStudyDataManager"
    	scope="session">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="germplasmListManager" factory-bean="managerFactory"
    	factory-method="getGermplasmListManager"
    	scope="session">
    	<aop:scoped-proxy/>
    </bean>
    
   	<bean id="gitRepositoryState" class="com.efficio.fieldbook.web.util.GitRepositoryState">	
   		<property name="branch" value="${git.branch}"/>
   		<property name="describe" value="${git.commit.id.describe}"/>
   		<property name="commitId" value="${git.commit.id}"/>
   		<property name="buildUserName" value="${git.build.user.name}"/>
   		<property name="buildUserEmail" value="${git.build.user.email}"/>
   		<property name="buildTime" value="${git.build.time}"/>
   		<property name="commitUserName" value="${git.commit.user.name}"/>
   		<property name="commitUserEmail" value="${git.commit.user.email}"/>
   		<property name="commitMessageShort" value="${git.commit.message.short}"/>
   		<property name="commitMessageFull" value="${git.commit.message.full}"/>
   		<property name="commitTime" value="${git.commit.time}"/>
   		<property name="commitIdAbbrev" value="${git.commit.id.abbrev}"/>   		
	</bean>

	<bean id="externalToolInfo" class="com.efficio.fieldbook.web.util.ExternalToolInfo">	
   		<property name="currentProjectId" value="${workbench.currentProjectId}"/>
   		<property name="oldFieldbookPath" value="${old.fb.tool.path}"/>   			
	</bean>	
   
    
    
</beans>