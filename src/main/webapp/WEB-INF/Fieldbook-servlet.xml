<?xml version="1.0" encoding="ISO-8859-1"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/util
			http://www.springframework.org/schema/util/spring-util-3.2.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- Declare property file locations -->
	<context:property-placeholder
		location="classpath:fieldbook.properties, classpath:crossing.properties" />

	<!-- AppConstants property -->
	<util:properties id="appConstantsProperties" location="classpath:appconstants.properties" />
	<util:properties id="configProperties" location="classpath:fieldbook.properties" />

	<!-- **************************************************************** -->
	<!-- RESOURCE FOLDERS CONFIGURATION -->
	<!-- Dispatcher configuration for serving static resources -->
	<!-- **************************************************************** -->
	<mvc:resources mapping="/static/**" location="/WEB-INF/static/" />
	<mvc:resources mapping="/dynamic/**" location="/WEB-INF/dynamic/" />

	<mvc:interceptors>
		<bean
			class="com.efficio.fieldbook.web.interceptor.FieldbookHandlerInterceptor" />

		<bean id="webContentInterceptor"
			class="org.springframework.web.servlet.mvc.WebContentInterceptor">
			<property name="cacheSeconds" value="0" />
			<property name="useExpiresHeader" value="true" />
			<property name="useCacheControlHeader" value="true" />
			<property name="useCacheControlNoStore" value="true" />
		</bean>
	</mvc:interceptors>




	<!-- **************************************************************** -->
	<!-- SPRING ANNOTATION PROCESSING -->
	<!-- **************************************************************** -->
	<mvc:annotation-driven/>
	<context:component-scan base-package="com.efficio.fieldbook" />
	<context:component-scan base-package="com.efficio.etl" />

	<!-- **************************************************************** -->
	<!-- MESSAGE EXTERNALIZATION/INTERNATIONALIZATION -->
	<!-- Standard Spring MessageSource implementation -->
	<!-- **************************************************************** -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="Messages" />
	</bean>

	<!-- **************************************************************** -->
	<!-- THYMELEAF-SPECIFIC ARTIFACTS -->
	<!-- TemplateResolver <- TemplateEngine <- ViewResolver -->
	<!-- **************************************************************** -->

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="false" />
		<property name="characterEncoding" value="UTF-8" />
	</bean>

	<bean id="nonCachableMessageResolver"
		  class="org.thymeleaf.spring3.messageresolver.SpringNonCacheableMessageResolver" />

	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="additionalDialects">
			<set>
				<bean
					class="com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect" />
				<bean
					class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect" />
				<bean
						class="org.thymeleaf.extras.conditionalcomments.dialect.ConditionalCommentsDialect" />
				<bean class="nz.net.ultraq.thymeleaf.LayoutDialect" />
			</set>
		</property>
		<property name="messageResolver" ref="nonCachableMessageResolver"></property>
	</bean>

	<bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<property name="characterEncoding" value="UTF-8" />
	</bean>


	<!-- This bean is singleton (default) scoped because there nothing that it represents which is request scoped. -->
	<bean id="fieldbookProperties" class="com.efficio.fieldbook.web.util.FieldbookProperties">
		<property name="programLocationsUrl" value="${url.program.locations}" />
		<property name="programBreedingMethodsUrl" value="${url.program.breeding.methods}" />
		<property name="germplasmDetailsUrl" value="${url.germplasm.details}" />
		<property name="uploadDirectory" value="${upload.directory}" />
		<property name="bvDesignPath" value="${bv.design.path}" />
	</bean>

	<bean id="fieldbookService" class="com.efficio.fieldbook.service.FieldbookServiceImpl">
		<property name="designRunner" ref="designRunner" />
	</bean>

	<bean id="designRunner" class="${design.runner}" />

	<bean id="designRunnerLicenseUtil" class="${design.runner.license.util}" />

	<bean id="workbenchService" class="com.efficio.fieldbook.service.WorkbenchServiceImpl" />
	
	<bean id="fileService" class="org.generationcp.commons.service.impl.FileServiceImpl"
		init-method="init">
		<constructor-arg value="${upload.directory}" />
	</bean>

	<bean id="etlFileService" class="com.efficio.etl.service.impl.FileServiceImpl"
		  init-method="init">
		<constructor-arg value="${upload.directory}" />
	</bean>

	<bean id="exportAdvanceListService"
		class="com.efficio.fieldbook.web.common.service.impl.ExportAdvanceListServiceImpl" />


	<bean id="importGermplasmfileService"
		class="com.efficio.fieldbook.web.trial.service.impl.ImportGermplasmFileServiceImpl" />


	<bean id="crossingService"
		class="com.efficio.fieldbook.web.common.service.impl.CrossingServiceImpl" />


	<bean id="crossingTemplateParser"
		class="com.efficio.fieldbook.web.common.service.impl.CrossingTemplateParser"
		scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="crossingTemplateExcelExporter"
		class="com.efficio.fieldbook.web.common.service.impl.CrossingTemplateExcelExporter">
		<property name="templateFile" value="CrossingTemplate_exported.xls" />
	</bean>


	<bean id="importWorkbookFileService"
		class="com.efficio.fieldbook.web.trial.service.impl.ImportWorkbookFileServiceImpl" />


	<bean id="fieldmapService" class="com.efficio.fieldbook.service.FieldMapServiceImpl" />


	<bean id="verticalFieldMapLayoutIterator"
		class="com.efficio.fieldbook.web.label.printing.service.impl.VerticalFieldMapLayoutIterator" />


	<bean id="horizontalFieldMapLayoutIterator"
		class="com.efficio.fieldbook.web.label.printing.service.impl.HorizontalFieldMapLayoutIterator" />


	<bean id="labelPrintingService" class="com.efficio.fieldbook.service.LabelPrintingServiceImpl" />


	<bean id="exportFieldmapService" class="com.efficio.fieldbook.service.ExportFieldmapServiceImpl" />


	<bean id="exportOrderingSerpentineOverRangeService"
		class="com.efficio.fieldbook.web.common.service.impl.ExportOrderingSerpentineOverRangeImpl" />


	<bean id="exportOrderingSerpentineOverColumnService"
		class="com.efficio.fieldbook.web.common.service.impl.ExportOrderingSerpentineOverColImpl" />


	<bean id="exportOrderingRowColService"
		class="com.efficio.fieldbook.web.common.service.impl.ExportOrderingRowColImpl" />


	<bean id="exportGermplasmListService"
		class="com.efficio.fieldbook.web.common.service.impl.ExportGermplasmListServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

    <bean id="studyServiceFactory" class="com.efficio.fieldbook.web.study.ImportStudyServiceFactory"/>

	<bean id="designImportService"
		  class="com.efficio.fieldbook.web.importdesign.service.impl.DesignImportServiceImpl"/>

    <bean id="genericCsvParser"
          class="org.generationcp.commons.parsing.GenericCsvFileProcessor"/>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10000000" />
	</bean>

	<bean id="userSelection" class="com.efficio.fieldbook.web.common.bean.UserSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="etlUserSelection" class="com.efficio.etl.web.bean.UserSelection"
		  scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="seedSelection" class="com.efficio.fieldbook.web.inventory.bean.SeedSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="userFieldmap" class="com.efficio.fieldbook.web.fieldmap.bean.UserFieldmap"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="userLabelPrinting"
		class="com.efficio.fieldbook.web.label.printing.bean.UserLabelPrinting"
		scope="session">
		<aop:scoped-proxy />
	</bean>


	<bean id="paginationListSelection"
		class="com.efficio.fieldbook.web.common.bean.PaginationListSelection"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="possibleValuesCache"
		class="com.efficio.fieldbook.web.trial.bean.PossibleValuesCache"
		scope="session">
		<aop:scoped-proxy />
	</bean>
	<!-- **************************************************************** -->
	<!-- RESTful Web Service -->
	<!-- **************************************************************** -->

	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<ref bean="jsonConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- **************************************************************** -->
	<!-- MIDDLEWARE Database Managers -->
	<!-- **************************************************************** -->




	<!-- Would be passed as a parameter when call getCrossExpansion so that
		user has the capability to override the settings -->
	<bean id="crossExpansionProperties"
		class="org.generationcp.middleware.util.CrossExpansionProperties">
		<property name="defaultLevel" value="${default.generation.level}" />
		<property name="profile" value="${pedigree.profile}" />
		<property name="hybridBreedingMethods" value="#{'${hybrid.breeding.methods}'.split(',')}" />
	</bean>

	<bean id="workbenchDataManager"
		class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl"
		destroy-method="close">
		<constructor-arg ref="workbenchHibernateSessionProvider" />
	</bean>

	<bean id="presetDataManager" factory-bean="managerFactory"
		factory-method="getPresetDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="methodDataManager" factory-bean="managerFactory"
		factory-method="getOntologyMethodDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="termDataManager" factory-bean="managerFactory"
		factory-method="getTermDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="propertyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyPropertyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="scaleDataManager" factory-bean="managerFactory"
		factory-method="getOntologyScaleDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyVariableManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>


	<bean id="ontologyDataManagerV2" factory-bean="managerFactory"
		factory-method="getNewOntologyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmDataManagerV2" factory-bean="managerFactory"
		factory-method="getGermplasmDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="userProgramStateDataManager" factory-bean="managerFactory"
		factory-method="getUserProgramStateDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryDataManager" factory-bean="managerFactory"
		factory-method="getInventoryDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="locationDataManager" factory-bean="managerFactory"
		  factory-method="getLocationDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>


	<bean id="dataImportService" factory-bean="managerFactory"
		factory-method="getDataImportService" scope="request">
		<aop:scoped-proxy />
		<property name="maxRowLimit" value="${dataset.import.maximum.row.limit}" />
	</bean>

	<bean id="fieldbookMiddlewareService" factory-bean="managerFactory"
		factory-method="getFieldbookMiddlewareService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryMiddlewareService" factory-bean="managerFactory"
		factory-method="getInventoryMiddlewareService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyService" factory-bean="managerFactory"
		factory-method="getOntologyService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="studyDataManagerV2" factory-bean="managerFactory"
		factory-method="getNewStudyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmListManager" factory-bean="managerFactory"
		factory-method="getGermplasmListManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="germplasmGroupingService" factory-bean="managerFactory"
		factory-method="getGermplasmGroupingService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="settingsService" class="com.efficio.fieldbook.service.SettingsServiceImpl" />

	<bean id="userDataManager" factory-bean="managerFactory"
		factory-method="getUserDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="listDataProjectSaver" factory-bean="managerFactory"
		  factory-method="getListDataProjectSaver" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="springAppContextProvider" class="org.generationcp.commons.util.SpringAppContextProvider" />

	<bean
		class="com.efficio.fieldbook.web.naming.expression.ComponentPostProcessor">
		<property name="ruleFactory" ref="ruleFactory" />
		<property name="processCodeFactory" ref="processCodeFactory" />
	</bean>

	<bean id="ruleFactory"
		class="org.generationcp.commons.ruleengine.ProcessCodeRuleFactory"
		init-method="init" />

	<bean id="ruleConfigProvider"
		class="org.generationcp.commons.ruleengine.provider.PropertyFileRuleConfigurationProvider">
		<property name="ruleSequenceConfiguration">
			<map>
				<entry key="naming" value="${naming.rules}" />
				<entry key="stockid" value="${stockid.rules}" />
			</map>
		</property>
	</bean>

    <!--
        The post processor factory will automatically generate a bean post processor that will handle the
        automatic registration of component-scanned classes into a target factory / registry instead of having
        to have a separate class for each bean post processor
        -->
    <bean id="postProcessorFactory" class="org.generationcp.commons.spring.util.ComponentPostProcessorFactory"/>

    <bean id="dataProcessorFactory" class="com.efficio.fieldbook.web.naming.expression.dataprocessor.ExpressionDataProcessorFactory"/>

    <bean factory-bean="postProcessorFactory" factory-method="generatePostProcessorFactory">
        <constructor-arg name="componentClass" type="java.lang.Class" value="com.efficio.fieldbook.web.naming.expression.dataprocessor.ExpressionDataProcessor"/>
        <constructor-arg name="factoryInstance" ref="dataProcessorFactory"/>
    </bean>


	<bean id="ruleService"
		class="org.generationcp.commons.ruleengine.impl.RulesServiceImpl" />
	<!-- This component scan automatically registers all implementations of 
		the Rule interface into the Spring context. In conjunction with the RulesPostProcessor 
		above, this automatically populates the map in the RuleFactory -->
	<context:component-scan base-package="com.efficio.fieldbook.web.naming.rules.naming" />
	<context:component-scan base-package="org.generationcp.commons.ruleengine.stockid" />
	<context:component-scan base-package="org.generationcp.commons.ruleengine.cross" />
    <context:component-scan base-package="com.efficio.fieldbook.web.naming.expression.dataprocessor"/>

	<bean id="settingsPresetService"
		class="org.generationcp.commons.service.impl.SettingsPresetServiceImpl" />

	<bean id="importInventoryService"
		class="com.efficio.fieldbook.web.common.service.impl.ImportInventoryServiceImpl">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryImportParser"
		class="com.efficio.fieldbook.web.util.parsing.InventoryImportParser"
		scope="prototype">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="designImportParser"
		class="com.efficio.fieldbook.web.util.parsing.DesignImportParser"
		scope="prototype">
		<aop:scoped-proxy />
	</bean>

	<bean id="designImportCsvParser"
		class="com.efficio.fieldbook.web.util.parsing.DesignImportCsvParser"
		scope="prototype">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="designImportExcelParser"
		class="com.efficio.fieldbook.web.util.parsing.DesignImportExcelParser"
		scope="prototype">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="designImportValidator"
		  class="com.efficio.fieldbook.web.importdesign.validator.DesignImportValidator"
		scope="prototype">
		<aop:scoped-proxy />
	</bean>

	<bean id="stockService" class="org.generationcp.commons.service.impl.StockServiceImpl">
		<aop:scoped-proxy />
	</bean>

    <bean id="germplasmExportService" class="org.generationcp.commons.service.impl.GermplasmExportServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmExportedWorkbook" class="org.generationcp.commons.parsing.GermplasmExportedWorkbook" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<!-- Including all beans used for generating Code Sheet when exporting Germplasm List excel file -->
	<context:component-scan base-package="org.generationcp.commons.workbook.generator" />

	<context:component-scan base-package="com.efficio.fieldbook.web.experimentdesign" />

	<bean id="processCodeFactory"
		class="com.efficio.fieldbook.web.naming.impl.ProcessCodeFactory"
		init-method="init" />

	<context:component-scan base-package="com.efficio.fieldbook.web.naming.expression" />
	
	<!-- Singleton bean as there is nothing request specific in here. -->
	<bean id="germplasmNamingProperties" class="org.generationcp.commons.service.GermplasmNamingProperties">
		<property name="germplasmOriginStudiesDefault" value="${germplasm.origin.studies.default}"/>
		<property name="germplasmOriginStudiesWheat" value="${germplasm.origin.studies.wheat}"/>
		<property name="germplasmOriginStudiesMaize" value="${germplasm.origin.studies.maize}"/>
        <property name="breedersCrossIDStudy" value="${breeders.cross.id.study}" />
	</bean>
	
	<bean id="contextUtil" class="org.generationcp.commons.spring.util.ContextUtil"
		scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="studyPermissionValidator" class=" org.generationcp.commons.util.StudyPermissionValidator"
		scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="seedSourceGenerator" class="org.generationcp.commons.service.impl.SeedSourceGenerator">
	</bean>

    <bean id="breedersCrossIDGenerator" class="org.generationcp.commons.service.impl.BreedersCrossIDGenerator">
	</bean>
	
	<bean id="jasperReportService" class="org.generationcp.commons.reports.service.impl.JasperReportServiceImpl"
		scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="pedigreeService" factory-bean="managerFactory"
		factory-method="getPedigreeService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="pedigreeDataManager" factory-bean="managerFactory"
		factory-method="getPedigreeDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	<bean id="reportService" factory-bean="managerFactory"
		factory-method="getReportService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="sampleListService" factory-bean="managerFactory"
		  factory-method="getSampleListService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="sampleService" factory-bean="managerFactory"
		  factory-method="getSampleService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="plantService" factory-bean="managerFactory"
		  factory-method="getPlantService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="formulaService" factory-bean="managerFactory"
		  factory-method="getFormulaService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="derivedVariableProcessor"
		  class="org.generationcp.commons.derivedvariable.DerivedVariableProcessor"
		  scope="request">
		<aop:scoped-proxy/>
	</bean>

	<!-- Data Source and Transaction Configuration -->

	<bean id="xaDataSources" class="org.generationcp.middleware.hibernate.XADataSources" />

    <bean id="labelGeneratorFactory" class="com.efficio.fieldbook.util.labelprinting.LabelGeneratorFactory"/>
    <bean id="excelLabelGenerator" class="com.efficio.fieldbook.util.labelprinting.ExcelLabelGenerator"/>
    <bean id="pdfLabelGenerator" class="com.efficio.fieldbook.util.labelprinting.PDFLabelGenerator"/>
    <bean id="csvSeedPreparationLabelGenerator" class="com.efficio.fieldbook.util.labelprinting.CSVSeedPreparationLabelGenerator"/>

	<bean id="workbenchHibernateSessionProvider"
		class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider"
		scope="request" destroy-method="close">
		<property name="sessionFactory" ref="WORKBENCH_SessionFactory" />

		<!-- JDK Standard Proxy around this request scoped bean, so we can use 
			it on longer scoped beans -->
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="atomikosTransactionManagerFieldbook" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransactionFieldbook" class="com.atomikos.icatch.jta.J2eeUserTransaction">
		<property name="transactionTimeout" value="${atomikos.transaction.timeout}" />
	</bean>

	<tx:annotation-driven/>
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="atomikosTransactionManagerFieldbook,atomikosUserTransactionFieldbook">
		<property name="transactionManager" ref="atomikosTransactionManagerFieldbook" />
		<property name="userTransaction" ref="atomikosUserTransactionFieldbook" />

	</bean>

	<bean id="managerFactoryProvider"
		class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
		<constructor-arg ref="workbenchDataManager" />
		<property name="pedigreeProfile" value="${pedigree.profile}"/>
	</bean>

	<bean id="managerFactory" name="managerFactory" factory-bean="managerFactoryProvider"
		factory-method="createInstance" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" scope="prototype"/>

    <bean id="userTreeStateService" class="org.generationcp.commons.service.impl.UserTreeStateServiceImpl"/>
    
    <bean id="resourceFinder" class="org.generationcp.middleware.util.ResourceFinder"/>

	<bean id="etlService" class="com.efficio.etl.service.impl.ETLServiceImpl" >
		<property name="maxRowLimit" value="${dataset.import.maximum.row.limit}" />
	</bean>

	<bean id="httpSessionUtil" class="org.generationcp.commons.util.HTTPSessionUtil" />


    <bean id="keySequenceRegisterService" factory-bean="managerFactory"
          factory-method="getKeySequenceRegisterService" scope="request">
        <aop:scoped-proxy />
    </bean>
    
    <bean id="studyService" factory-bean="managerFactory"
    	factory-method="getStudyService" scope="request">
        <aop:scoped-proxy />
    </bean>

	<bean id="csvExportSampleListService" class="org.generationcp.commons.service.impl.CsvExportSampleListServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

    <!-- Nested <beans> elements can only be at the end. -->

	<!-- Only activate liquibase auto update in non-production environments.
		Requires -Dspring.profiles.active=development in system properties to make sure auto activation works in dev environments only. -->

	<!-- As a best practice, for production environments (definition of which is not yet clearly defined for BMS) database update should not trigger automatically.
		 For this case, liquibase can generate a SQL script using the updateSQL commnad from the change log using a command that looks like following
		 	(add "dash dash" before command line options):

			java -jar <BMS_INSTALL>/infrastructure/tomcat/webapps/ibpworkbench/WEB-INF/lib/liquibase-core-3.5.0.jar
			  classpath=<BMS_INSTALL>/infrastructure/tomcat/webapps/ibpworkbench.war
			  driver=com.mysql.jdbc.Driver
			  changeLogFile=db_changelog_crop.xml
			  url="jdbc:mysql://localhost:43306/ibdbv2_maize_merged"
			  username=root
			  password=
			  updateSQL

		TODO: This needs to be scripted for dynamically detecting crop datbases to run against.

		Script generated as such will have to be runn manually against each production database by administrators/data managers.
	 -->
	<beans profile="development">
		<bean id="liquibaseInitBean" class="org.generationcp.middleware.liquibase.LiquibaseInitBean" />
	</beans>


</beans>
